{"ast":null,"code":"var _jsxFileName = \"/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ListOptions from './ListOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditListMode({\n  taskLists,\n  handleChangeTaskState,\n  listIndex\n}) {\n  _s();\n  console.log(\"LIST INDEX\", listIndex);\n  const currentTitle = taskLists[listIndex].title;\n  console.log(currentTitle);\n  const [editingTitle, setEditingTitle] = useState(currentTitle);\n  const listItems = taskLists[listIndex].currentItems;\n  const [editingList, setEditingList] = useState([...listItems]);\n  const checkedItems = taskLists[listIndex].completedItems;\n  const editModeDisplayed = taskLists[listIndex].editModeDisplayed;\n  const optionsDisplayed = taskLists[listIndex].optionsDisplayed;\n  const listRef = useRef([]);\n  useEffect(() => {\n    const size = listRef.current.length;\n    if (size > 0) {\n      listRef.current[size - 1].focus(); //focuses on recently created task\n    }\n  }, [editingList.length]);\n  function handleTaskChange(event, index) {\n    const newListItems = [...listItems];\n    console.log(\"NEW LIST ITEMS\", newListItems);\n    console.log(\"INDEX\", index);\n    newListItems[index] = event.target.value;\n    setEditingList(newListItems);\n    event.target.style.height = '1em';\n    event.target.style.height = `${event.target.scrollHeight}px`;\n  }\n  function handleTitleChange(event) {\n    setEditingTitle(event.target.value);\n  }\n  function handleUserClickOut(event, index) {\n    const taskContent = event.target.value;\n    // console.log(\"CLICKED OUT\")\n    if (taskContent.length === 0) {\n      console.log(\"EMPTY TASK\");\n      const newEditingList = [...editingList];\n      newEditingList.pop(index);\n      setEditingList(newEditingList);\n    }\n  }\n  function handleCloseEditMode(event) {\n    handleChangeTaskState(listIndex, \"editModeDisplayed\", false);\n  }\n  function createNewTask(event) {\n    const text = event.target.value;\n    setEditingList([...editingList, text]);\n  }\n  function handleSave(event) {\n    handleChangeTaskState(listIndex, \"currentItems\", editingList);\n    handleChangeTaskState(listIndex, \"title\", editingTitle);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"edit-mode-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-container edit-mode\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"title-input list-name\",\n          value: editingTitle,\n          onChange: event => {\n            handleTitleChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => {\n            handleCloseEditMode(event);\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [editingList.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"1\",\n            value: item,\n            ref: el => listRef.current = [...listRef.current, el],\n            onBlur: event => {\n              handleUserClickOut(event, index);\n            },\n            onChange: event => {\n              handleTaskChange(event, index);\n            },\n            className: \"task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"1\",\n            placeholder: \"+ New Task\",\n            onClick: e => createNewTask(e),\n            className: \"task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            type: \"checkbox\",\n            id: \"invisible-checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: event => {\n          handleSave(event);\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 7\n  }, this);\n}\n_s(EditListMode, \"MwfinAFWHKK1nqILirDckMxLEJs=\");\n_c = EditListMode;\nvar _c;\n$RefreshReg$(_c, \"EditListMode\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ListOptions","jsxDEV","_jsxDEV","EditListMode","taskLists","handleChangeTaskState","listIndex","_s","console","log","currentTitle","title","editingTitle","setEditingTitle","listItems","currentItems","editingList","setEditingList","checkedItems","completedItems","editModeDisplayed","optionsDisplayed","listRef","size","current","length","focus","handleTaskChange","event","index","newListItems","target","value","style","height","scrollHeight","handleTitleChange","handleUserClickOut","taskContent","newEditingList","pop","handleCloseEditMode","createNewTask","text","handleSave","id","children","className","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","type","disabled","rows","ref","el","onBlur","placeholder","e","_c","$RefreshReg$"],"sources":["/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport ListOptions from './ListOptions'\n\n\nexport default function EditListMode({ taskLists, handleChangeTaskState, listIndex}) {\n\n  console.log(\"LIST INDEX\", listIndex)\n  const currentTitle=taskLists[listIndex].title\n  console.log(currentTitle)\n  const [editingTitle, setEditingTitle]=useState(currentTitle)\n  const listItems = taskLists[listIndex].currentItems\n  const [editingList, setEditingList]=useState([...listItems])\n  const checkedItems = taskLists[listIndex].completedItems\n  const editModeDisplayed = taskLists[listIndex].editModeDisplayed\n  const optionsDisplayed = taskLists[listIndex].optionsDisplayed\n\n\n    const listRef = useRef([]);\n\n    useEffect(() => {\n      const size = listRef.current.length;\n      if (size > 0) {\n        listRef.current[size - 1].focus(); //focuses on recently created task\n      }\n      \n    }, [editingList.length]);\n  \n    function handleTaskChange(event, index) {\n      const newListItems = [...listItems]\n      console.log(\"NEW LIST ITEMS\", newListItems) \n      console.log(\"INDEX\", index)\n      newListItems[index] = event.target.value\n      setEditingList(newListItems)\n      event.target.style.height = '1em';\n      event.target.style.height = `${event.target.scrollHeight}px`; \n      \n    }\n    function handleTitleChange(event){\n      setEditingTitle(event.target.value)\n    }\n  \n  \n    function handleUserClickOut(event,index){\n      const taskContent=event.target.value\n      // console.log(\"CLICKED OUT\")\n      if (taskContent.length===0){\n        console.log(\"EMPTY TASK\")\n        const newEditingList=[...editingList]\n        newEditingList.pop(index)\n        setEditingList(newEditingList)\n      }\n    }\n    function handleCloseEditMode(event){\n      handleChangeTaskState(listIndex, \"editModeDisplayed\", false)\n    }\n  \n    function createNewTask(event) {\n      const text = event.target.value\n      setEditingList([...editingList, text])\n    }\n\n    function handleSave(event){\n    \n      handleChangeTaskState(listIndex, \"currentItems\", editingList)\n      handleChangeTaskState(listIndex, \"title\", editingTitle)\n    }\n    \n    return (\n      <div id=\"edit-mode-container\" >\n      <div className=\"list-container edit-mode\">\n        <div className='list-header'>      \n          <input className=\"title-input list-name\" value={editingTitle} onChange={(event)=>{handleTitleChange(event)}}></input>\n          <button onClick={(event)=>{handleCloseEditMode(event)}}>Close</button>\n          </div>\n  \n        <ul>\n          {editingList.map((item, index) => (\n            <li key={index}>\n              <input \n                type= 'checkbox' disabled={true}/>\n              <textarea \n                rows=\"1\" \n                value={item}\n                ref = {el => listRef.current = [...listRef.current, el]}\n                onBlur={(event) => {handleUserClickOut(event,index)}}  \n                onChange={(event) => {handleTaskChange(event, index)}} \n                className=\"task\"\n              />\n            </li>\n          ))}\n          <li>\n            <textarea \n              rows=\"1\" \n              placeholder='+ New Task' \n              onClick={(e) => createNewTask(e)} \n              className=\"task\"\n            /> \n            <input \n              disabled={true}\n              type= 'checkbox'\n              id='invisible-checkbox'\n            />\n          </li>\n        </ul>\n        <button onClick={(event)=>{handleSave(event)}}>Save</button>\n      </div>\n      </div>\n\n    );\n  }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGvC,eAAe,SAASC,YAAYA,CAAC;EAAEC,SAAS;EAAEC,qBAAqB;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAEnFC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,SAAS,CAAC;EACpC,MAAMI,YAAY,GAACN,SAAS,CAACE,SAAS,CAAC,CAACK,KAAK;EAC7CH,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzB,MAAM,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAChB,QAAQ,CAACa,YAAY,CAAC;EAC5D,MAAMI,SAAS,GAAGV,SAAS,CAACE,SAAS,CAAC,CAACS,YAAY;EACnD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAACpB,QAAQ,CAAC,CAAC,GAAGiB,SAAS,CAAC,CAAC;EAC5D,MAAMI,YAAY,GAAGd,SAAS,CAACE,SAAS,CAAC,CAACa,cAAc;EACxD,MAAMC,iBAAiB,GAAGhB,SAAS,CAACE,SAAS,CAAC,CAACc,iBAAiB;EAChE,MAAMC,gBAAgB,GAAGjB,SAAS,CAACE,SAAS,CAAC,CAACe,gBAAgB;EAG5D,MAAMC,OAAO,GAAGxB,MAAM,CAAC,EAAE,CAAC;EAE1BC,SAAS,CAAC,MAAM;IACd,MAAMwB,IAAI,GAAGD,OAAO,CAACE,OAAO,CAACC,MAAM;IACnC,IAAIF,IAAI,GAAG,CAAC,EAAE;MACZD,OAAO,CAACE,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC;EAEF,CAAC,EAAE,CAACV,WAAW,CAACS,MAAM,CAAC,CAAC;EAExB,SAASE,gBAAgBA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACtC,MAAMC,YAAY,GAAG,CAAC,GAAGhB,SAAS,CAAC;IACnCN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEqB,YAAY,CAAC;IAC3CtB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEoB,KAAK,CAAC;IAC3BC,YAAY,CAACD,KAAK,CAAC,GAAGD,KAAK,CAACG,MAAM,CAACC,KAAK;IACxCf,cAAc,CAACa,YAAY,CAAC;IAC5BF,KAAK,CAACG,MAAM,CAACE,KAAK,CAACC,MAAM,GAAG,KAAK;IACjCN,KAAK,CAACG,MAAM,CAACE,KAAK,CAACC,MAAM,GAAI,GAAEN,KAAK,CAACG,MAAM,CAACI,YAAa,IAAG;EAE9D;EACA,SAASC,iBAAiBA,CAACR,KAAK,EAAC;IAC/Bf,eAAe,CAACe,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;EACrC;EAGA,SAASK,kBAAkBA,CAACT,KAAK,EAACC,KAAK,EAAC;IACtC,MAAMS,WAAW,GAACV,KAAK,CAACG,MAAM,CAACC,KAAK;IACpC;IACA,IAAIM,WAAW,CAACb,MAAM,KAAG,CAAC,EAAC;MACzBjB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACzB,MAAM8B,cAAc,GAAC,CAAC,GAAGvB,WAAW,CAAC;MACrCuB,cAAc,CAACC,GAAG,CAACX,KAAK,CAAC;MACzBZ,cAAc,CAACsB,cAAc,CAAC;IAChC;EACF;EACA,SAASE,mBAAmBA,CAACb,KAAK,EAAC;IACjCvB,qBAAqB,CAACC,SAAS,EAAE,mBAAmB,EAAE,KAAK,CAAC;EAC9D;EAEA,SAASoC,aAAaA,CAACd,KAAK,EAAE;IAC5B,MAAMe,IAAI,GAAGf,KAAK,CAACG,MAAM,CAACC,KAAK;IAC/Bf,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAE2B,IAAI,CAAC,CAAC;EACxC;EAEA,SAASC,UAAUA,CAAChB,KAAK,EAAC;IAExBvB,qBAAqB,CAACC,SAAS,EAAE,cAAc,EAAEU,WAAW,CAAC;IAC7DX,qBAAqB,CAACC,SAAS,EAAE,OAAO,EAAEM,YAAY,CAAC;EACzD;EAEA,oBACEV,OAAA;IAAK2C,EAAE,EAAC,qBAAqB;IAAAC,QAAA,eAC7B5C,OAAA;MAAK6C,SAAS,EAAC,0BAA0B;MAAAD,QAAA,gBACvC5C,OAAA;QAAK6C,SAAS,EAAC,aAAa;QAAAD,QAAA,gBAC1B5C,OAAA;UAAO6C,SAAS,EAAC,uBAAuB;UAACf,KAAK,EAAEpB,YAAa;UAACoC,QAAQ,EAAGpB,KAAK,IAAG;YAACQ,iBAAiB,CAACR,KAAK,CAAC;UAAA;QAAE;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACrHlD,OAAA;UAAQmD,OAAO,EAAGzB,KAAK,IAAG;YAACa,mBAAmB,CAACb,KAAK,CAAC;UAAA,CAAE;UAAAkB,QAAA,EAAC;QAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE,CAAC,eAERlD,OAAA;QAAA4C,QAAA,GACG9B,WAAW,CAACsC,GAAG,CAAC,CAACC,IAAI,EAAE1B,KAAK,kBAC3B3B,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YACEsD,IAAI,EAAE,UAAU;YAACC,QAAQ,EAAE;UAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eACpClD,OAAA;YACEwD,IAAI,EAAC,GAAG;YACR1B,KAAK,EAAEuB,IAAK;YACZI,GAAG,EAAIC,EAAE,IAAItC,OAAO,CAACE,OAAO,GAAG,CAAC,GAAGF,OAAO,CAACE,OAAO,EAAEoC,EAAE,CAAE;YACxDC,MAAM,EAAGjC,KAAK,IAAK;cAACS,kBAAkB,CAACT,KAAK,EAACC,KAAK,CAAC;YAAA,CAAE;YACrDmB,QAAQ,EAAGpB,KAAK,IAAK;cAACD,gBAAgB,CAACC,KAAK,EAAEC,KAAK,CAAC;YAAA,CAAE;YACtDkB,SAAS,EAAC;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjB,CAAC;QAAA,GAVKvB,KAAK;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAWV,CACL,CAAC,eACFlD,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YACEwD,IAAI,EAAC,GAAG;YACRI,WAAW,EAAC,YAAY;YACxBT,OAAO,EAAGU,CAAC,IAAKrB,aAAa,CAACqB,CAAC,CAAE;YACjChB,SAAS,EAAC;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjB,CAAC,eACFlD,OAAA;YACEuD,QAAQ,EAAE,IAAK;YACfD,IAAI,EAAE,UAAU;YAChBX,EAAE,EAAC;UAAoB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACLlD,OAAA;QAAQmD,OAAO,EAAGzB,KAAK,IAAG;UAACgB,UAAU,CAAChB,KAAK,CAAC;QAAA,CAAE;QAAAkB,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGV;AAAC7C,EAAA,CAzGqBJ,YAAY;AAAA6D,EAAA,GAAZ7D,YAAY;AAAA,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/TaskList.jsx\";\nimport React, { useState } from 'react';\nimport '../styles/Lists.css';\nimport ListOptions from './ListOptions';\nimport EditListMode from './EditListMode';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TaskList({\n  listIndex,\n  taskLists,\n  setTaskLists\n}) {\n  // const[listItems, setListItems] = useState(['task 1 task 1 task 1 ','task 2','task 3 ', 'task 4']) //[ declared thing, how you set it to something/override]\n  // const [checkedItems, setCheckedItems] = useState([])\n  // // const[checked, setChecked] = useState(false)\n  // const[optionsDisplayed, setOptionsDisplayed]=useState(false)\n  // const[title,setTitle] = useState('Title')\n\n  // state for each TaskList before save\n  // const [editModeDisplayed, setEditModeDisplayed] = useState(false)\n\n  function handleChangeTaskState(index, key, value) {\n    const newTaskLists = [...taskLists];\n    newTaskLists[index][key] = value;\n    setTaskLists(newTaskLists);\n  }\n\n  // function handleTaskChange(event, index) {\n  //   const newListItems = [...listItems]\n  //   newListItems[index] = event.target.value\n  //   setListItems(newListItems)\n  //   event.target.style.height = '1em';\n  //   event.target.style.height = `${event.target.scrollHeight}px`; \n\n  // }\n  // function handleTitleChange(event){\n  //   setTitle(event.target.value)\n  // }\n\n  const listItems = taskLists[listIndex].currentItems;\n  const checkedItems = taskLists[listIndex].completedItems;\n  const editModeDisplayed = taskLists[listIndex].editModeDisplayed;\n  const optionsDisplayed = taskLists[listIndex].optionsDisplayed;\n  function handleCheckBoxChange(event, index, item) {\n    const currCheckbox = event.target.value;\n    // setChecked()\n    const newListItems = [...listItems];\n    newListItems.pop(index);\n    const newCheckedItems = [...checkedItems, item];\n    // const newListItems = listItems.filter((item, i) => i !== index)\n\n    handleChangeTaskState(listIndex, \"checkedItems\", newCheckedItems);\n    handleChangeTaskState(listIndex, \"currentItems\", newListItems);\n  }\n  function handleOptionsClick(event) {\n    const currentOptionsDisplayed = taskLists[listIndex].optionsDisplayed;\n    handleChangeTaskState(listIndex, \"optionsDisplayed\", !currentOptionsDisplayed);\n  }\n\n  // function createNewTask(event) {\n  //   const text = event.target.value\n  //   setListItems([...listItems, text])\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [editModeDisplayed && /*#__PURE__*/_jsxDEV(EditListMode, {\n      taskLists: taskLists,\n      handleChangeTaskState: handleChangeTaskState,\n      listIndex: listIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"list-name\",\n          children: taskLists[listIndex].title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => {\n            handleOptionsClick(event);\n          },\n          children: \"edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), optionsDisplayed && /*#__PURE__*/_jsxDEV(ListOptions, {\n        taskLists: taskLists,\n        handleChangeTaskState: handleChangeTaskState,\n        listIndex: listIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-items-container\",\n          children: [listItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"task-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: false,\n              onChange: event => {\n                handleCheckBoxChange(event, index, item);\n              },\n              className: \"task\",\n              autoFocus: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"displayed-task\",\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this), checkedItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"task-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              disabled: true,\n              checked: true,\n              className: \"task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"displayed-task\",\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, index + listItems.length, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flower-container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n//arrow function =>{handleInputChange(event,index)} allows parameters passed\n_c = TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","ListOptions","EditListMode","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","listIndex","taskLists","setTaskLists","handleChangeTaskState","index","key","value","newTaskLists","listItems","currentItems","checkedItems","completedItems","editModeDisplayed","optionsDisplayed","handleCheckBoxChange","event","item","currCheckbox","target","newListItems","pop","newCheckedItems","handleOptionsClick","currentOptionsDisplayed","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","onClick","map","type","checked","onChange","autoFocus","disabled","length","_c","$RefreshReg$"],"sources":["/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/TaskList.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport '../styles/Lists.css';\nimport ListOptions from './ListOptions';\nimport EditListMode from './EditListMode';\n\nexport default function TaskList({listIndex, taskLists, setTaskLists}) {\n\n  // const[listItems, setListItems] = useState(['task 1 task 1 task 1 ','task 2','task 3 ', 'task 4']) //[ declared thing, how you set it to something/override]\n  // const [checkedItems, setCheckedItems] = useState([])\n  // // const[checked, setChecked] = useState(false)\n  // const[optionsDisplayed, setOptionsDisplayed]=useState(false)\n  // const[title,setTitle] = useState('Title')\n\n  // state for each TaskList before save\n  // const [editModeDisplayed, setEditModeDisplayed] = useState(false)\n\n\n  function handleChangeTaskState(index, key, value) {\n    const newTaskLists = [...taskLists]\n    newTaskLists[index][key] = value\n    setTaskLists(newTaskLists)\n  }\n\n  // function handleTaskChange(event, index) {\n  //   const newListItems = [...listItems]\n  //   newListItems[index] = event.target.value\n  //   setListItems(newListItems)\n  //   event.target.style.height = '1em';\n  //   event.target.style.height = `${event.target.scrollHeight}px`; \n    \n  // }\n  // function handleTitleChange(event){\n  //   setTitle(event.target.value)\n  // }\n  \n  const listItems = taskLists[listIndex].currentItems\n  const checkedItems = taskLists[listIndex].completedItems\n  const editModeDisplayed = taskLists[listIndex].editModeDisplayed\n  const optionsDisplayed = taskLists[listIndex].optionsDisplayed\n\n  function handleCheckBoxChange(event,index,item){\n    const currCheckbox=event.target.value\n    // setChecked()\n    const newListItems = [...listItems];\n    newListItems.pop(index);\n    const newCheckedItems = [...checkedItems, item]\n    // const newListItems = listItems.filter((item, i) => i !== index)\n    \n    handleChangeTaskState(listIndex, \"checkedItems\", newCheckedItems)\n    handleChangeTaskState(listIndex, \"currentItems\", newListItems)\n\n  }\n\n  function handleOptionsClick(event){\n    const currentOptionsDisplayed = taskLists[listIndex].optionsDisplayed\n    handleChangeTaskState(listIndex, \"optionsDisplayed\", !currentOptionsDisplayed)\n  }\n\n  // function createNewTask(event) {\n  //   const text = event.target.value\n  //   setListItems([...listItems, text])\n  // }\n  \n\n\n  return (\n    <>\n      {editModeDisplayed && <EditListMode \n        taskLists={taskLists}\n        handleChangeTaskState={handleChangeTaskState}\n        listIndex={listIndex}\n      />}\n      <div className=\"task-list\">\n        <div className='list-header'>      \n          <h1 className=\"list-name\">{taskLists[listIndex].title}</h1> \n          {/* make title not an input not working */}\n          <button onClick={(event)=>{handleOptionsClick(event)}}>edit</button>\n          </div>\n          <hr></hr>\n\n          {optionsDisplayed && <ListOptions \n          taskLists={taskLists}\n          handleChangeTaskState={handleChangeTaskState}\n          listIndex={listIndex}/>\n          }\n          <div className=\"list-container\">\n          <ul className=\"list-items-container\">\n          {listItems.map((item, index) => (\n            <li className='task-container' key={index}>\n              <input \n                type= 'checkbox'\n                checked={false}\n                onChange={(event) => {handleCheckBoxChange(event, index,item)}} className=\"task\" autoFocus />\n                <p className='displayed-task'>{item}</p>\n            </li>\n          ))}\n          <h3>Completed</h3>\n          {checkedItems.map((item, index) => (\n            <li className='task-container' key={index + listItems.length}>\n              <input type='checkbox' disabled={true} checked={true} className=\"task\" />\n              <p className='displayed-task'>{item}</p>\n            </li>\n          ))}\n        </ul>\n        <div className=\"flower-container\">\n          \n        </div>\n          </div>\n     \n\n      </div>\n    </>\n  );\n}\n//arrow function =>{handleInputChange(event,index)} allows parameters passed"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
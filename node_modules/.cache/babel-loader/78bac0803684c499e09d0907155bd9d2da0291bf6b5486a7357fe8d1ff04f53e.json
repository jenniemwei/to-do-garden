{"ast":null,"code":"var _jsxFileName = \"/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/AllTaskLists.jsx\",\n  _s = $RefreshSig$();\nimport TaskList from \"./TaskList\";\nimport \"../styles/AllTaskLists.css\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AllTaskLists() {\n  _s();\n  useEffect(() => {\n    const taskLists = JSON.parse(localStorage.getItem(\"taskLists\"));\n    if (taskLists) {\n      setTaskLists(taskLists);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"taskLists\", JSON.stringify(taskLists));\n  }, [taskLists]);\n  const [taskLists, setTaskLists] = useState([{\n    title: \"Task List 1\",\n    currentItems: [\"Task 1\", 'Task 2', 'Task 3'],\n    checkedItems: [\"Task 2\"],\n    editModeDisplayed: false,\n    optionsDisplayed: false\n  }, {\n    title: \"Task List 2\",\n    currentItems: [\"Task 3\"],\n    checkedItems: [\"Task 4\"],\n    editModeDisplayed: false,\n    optionsDisplayed: false\n  }]);\n  function handleNewList() {\n    setTaskLists([...taskLists, {\n      name: \"Title\",\n      currentItems: [],\n      checkedItems: [],\n      editModeDisplayed: true,\n      optionsDisplayed: false\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-lists-container\",\n    children: [taskLists.map((taskList, index) => {\n      return /*#__PURE__*/_jsxDEV(TaskList, {\n        listIndex: index,\n        taskLists: taskLists,\n        setTaskLists: setTaskLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: event => {\n        handleNewList(event);\n      },\n      children: \"New List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(AllTaskLists, \"JLXZzkUw41/63hK3/7771EUjJQw=\");\n_c = AllTaskLists;\nvar _c;\n$RefreshReg$(_c, \"AllTaskLists\");","map":{"version":3,"names":["TaskList","useEffect","useState","jsxDEV","_jsxDEV","AllTaskLists","_s","taskLists","JSON","parse","localStorage","getItem","setTaskLists","setItem","stringify","title","currentItems","checkedItems","editModeDisplayed","optionsDisplayed","handleNewList","name","className","children","map","taskList","index","listIndex","fileName","_jsxFileName","lineNumber","columnNumber","onClick","event","_c","$RefreshReg$"],"sources":["/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/AllTaskLists.jsx"],"sourcesContent":["import TaskList from \"./TaskList\"\nimport \"../styles/AllTaskLists.css\"\nimport { useEffect, useState } from \"react\"\n\nexport default function AllTaskLists() {\n  useEffect(() => {\n    const taskLists = JSON.parse(localStorage.getItem(\"taskLists\"));\n    if (taskLists) {\n      setTaskLists(taskLists);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"taskLists\", JSON.stringify(taskLists))\n  } , [taskLists]);\n\n  const [taskLists, setTaskLists] = useState([\n    {\n      title: \"Task List 1\",\n      currentItems: [\n        \"Task 1\",\n        'Task 2',\n        'Task 3',\n      ],\n      checkedItems: [\n        \"Task 2\",\n      ],\n      editModeDisplayed: false,\n      optionsDisplayed: false,\n    },\n    {\n      title: \"Task List 2\",\n      currentItems: [\n        \"Task 3\",\n      ],\n      checkedItems: [\n        \"Task 4\",\n      ],\n      editModeDisplayed: false,\n      optionsDisplayed: false,\n    },\n  ])\n\n  function handleNewList() {\n    setTaskLists([\n      ...taskLists,\n      {\n        name: \"Title\",\n        currentItems: [],\n        checkedItems: [],\n        editModeDisplayed: true,\n        optionsDisplayed: false,\n      }\n    ])\n  }\n\n\n  return (\n    <div className=\"all-lists-container\">\n\n      {taskLists.map((taskList, index) => {\n        return (\n          <TaskList\n            listIndex={index}\n            taskLists={taskLists}\n            setTaskLists={setTaskLists}\n          />\n        )\n      })}\n      <button onClick={(event)=>{handleNewList(event)}}>New List</button>\n      {/* <TaskList/>\n      <TaskList/> */}\n      {/* <button className=\"add-list-button\" onClick={() => handleAddTask}>Add Task</button> */}\n    </div>\n  )\n}"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,YAAY;AACjC,OAAO,4BAA4B;AACnC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrCL,SAAS,CAAC,MAAM;IACd,MAAMM,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/D,IAAIJ,SAAS,EAAE;MACbK,YAAY,CAACL,SAAS,CAAC;IACzB;EACF,CAAC,EAAE,EAAE,CAAC;EACNN,SAAS,CAAC,MAAM;IACdS,YAAY,CAACG,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,SAAS,CAACP,SAAS,CAAC,CAAC;EAC9D,CAAC,EAAG,CAACA,SAAS,CAAC,CAAC;EAEhB,MAAM,CAACA,SAAS,EAAEK,YAAY,CAAC,GAAGV,QAAQ,CAAC,CACzC;IACEa,KAAK,EAAE,aAAa;IACpBC,YAAY,EAAE,CACZ,QAAQ,EACR,QAAQ,EACR,QAAQ,CACT;IACDC,YAAY,EAAE,CACZ,QAAQ,CACT;IACDC,iBAAiB,EAAE,KAAK;IACxBC,gBAAgB,EAAE;EACpB,CAAC,EACD;IACEJ,KAAK,EAAE,aAAa;IACpBC,YAAY,EAAE,CACZ,QAAQ,CACT;IACDC,YAAY,EAAE,CACZ,QAAQ,CACT;IACDC,iBAAiB,EAAE,KAAK;IACxBC,gBAAgB,EAAE;EACpB,CAAC,CACF,CAAC;EAEF,SAASC,aAAaA,CAAA,EAAG;IACvBR,YAAY,CAAC,CACX,GAAGL,SAAS,EACZ;MACEc,IAAI,EAAE,OAAO;MACbL,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,EAAE;MAChBC,iBAAiB,EAAE,IAAI;MACvBC,gBAAgB,EAAE;IACpB,CAAC,CACF,CAAC;EACJ;EAGA,oBACEf,OAAA;IAAKkB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,GAEjChB,SAAS,CAACiB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MAClC,oBACEtB,OAAA,CAACJ,QAAQ;QACP2B,SAAS,EAAED,KAAM;QACjBnB,SAAS,EAAEA,SAAU;QACrBK,YAAY,EAAEA;MAAa;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAEN,CAAC,CAAC,eACF3B,OAAA;MAAQ4B,OAAO,EAAGC,KAAK,IAAG;QAACb,aAAa,CAACa,KAAK,CAAC;MAAA,CAAE;MAAAV,QAAA,EAAC;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIhE,CAAC;AAEV;AAACzB,EAAA,CAtEuBD,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
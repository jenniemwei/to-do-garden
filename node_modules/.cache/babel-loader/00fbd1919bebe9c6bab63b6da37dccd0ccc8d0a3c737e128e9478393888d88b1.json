{"ast":null,"code":"var _jsxFileName = \"/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ListOptions from './ListOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditListMode({\n  taskLists,\n  handleChangeTaskState,\n  index\n}) {\n  _s();\n  const [editinglist, setEditingList] = useState([]);\n  const listRef = useRef([]);\n  useEffect(() => {\n    const size = listRef.current.length;\n    listRef.current[size - 1].focus();\n  }, [listItems.length]);\n  function handleTaskChange(event, index) {\n    const newListItems = [...listItems];\n    newListItems[index] = event.target.value;\n    setListItems(newListItems);\n    event.target.style.height = '1em';\n    event.target.style.height = `${event.target.scrollHeight}px`;\n  }\n  function handleTitleChange(event) {\n    setTitle(event.target.value);\n  }\n  function handleUserClickOut(event, index) {\n    const taskContent = event.target.value;\n    // console.log(\"CLICKED OUT\")\n    if (taskContent.length === 0) {\n      const newListItems = [...listItems];\n      newListItems.pop(index);\n      setListItems(newListItems);\n    }\n  }\n  function handleCloseEditMode(event) {\n    setEditModeDisplayed(false);\n  }\n  function createNewTask(event) {\n    const text = event.target.value;\n    setListItems([...listItems, text]);\n  }\n  // function handleDone(event){\n  //   setListItems(listItems)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"edit-mode-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list edit-mode\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"title-input list-name\",\n          value: title,\n          onChange: event => {\n            handleTitleChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => {\n            handleCloseEditMode(event);\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [listItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"1\",\n            value: item,\n            ref: el => listRef.current = [...listRef.current, el],\n            onBlur: event => {\n              handleUserClickOut(event, index);\n            },\n            onChange: event => {\n              handleTaskChange(event, index);\n            },\n            className: \"task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"1\",\n            placeholder: \"+ New Task\",\n            onClick: e => createNewTask(e),\n            className: \"task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            type: \"checkbox\",\n            id: \"invisible-checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n}\n_s(EditListMode, \"CBZWQZWT2kK0Fvr2F/5jNMQqnts=\");\n_c = EditListMode;\nvar _c;\n$RefreshReg$(_c, \"EditListMode\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ListOptions","jsxDEV","_jsxDEV","EditListMode","taskLists","handleChangeTaskState","index","_s","editinglist","setEditingList","listRef","size","current","length","focus","listItems","handleTaskChange","event","newListItems","target","value","setListItems","style","height","scrollHeight","handleTitleChange","setTitle","handleUserClickOut","taskContent","pop","handleCloseEditMode","setEditModeDisplayed","createNewTask","text","id","children","className","title","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","type","disabled","rows","ref","el","onBlur","placeholder","e","_c","$RefreshReg$"],"sources":["/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport ListOptions from './ListOptions'\n\n\nexport default function EditListMode({ taskLists, handleChangeTaskState, index }) {\n\n  const [editinglist, setEditingList]=useState([])\n  \n\n    \n    const listRef = useRef([]);\n\n    useEffect(() => {\n      const size = listRef.current.length;\n      listRef.current[size - 1].focus();\n      \n    }, [listItems.length]);\n  \n    function handleTaskChange(event, index) {\n      const newListItems = [...listItems]\n      newListItems[index] = event.target.value\n      setListItems(newListItems)\n      event.target.style.height = '1em';\n      event.target.style.height = `${event.target.scrollHeight}px`; \n      \n    }\n    function handleTitleChange(event){\n      setTitle(event.target.value)\n    }\n  \n  \n    function handleUserClickOut(event,index){\n      const taskContent=event.target.value\n      // console.log(\"CLICKED OUT\")\n      if (taskContent.length===0){\n        const newListItems=[...listItems]\n        newListItems.pop(index)\n        setListItems(newListItems)\n      }\n    }\n    function handleCloseEditMode(event){\n      setEditModeDisplayed(false)\n    }\n  \n    function createNewTask(event) {\n      const text = event.target.value\n      setListItems([...listItems, text])\n    }\n    // function handleDone(event){\n    //   setListItems(listItems)\n    // }\n    \n    return (\n      <div id=\"edit-mode-container\" >\n      <div className=\"task-list edit-mode\">\n        <div className='list-header'>      \n          <input className=\"title-input list-name\" value={title} onChange={(event)=>{handleTitleChange(event)}}></input>\n          <button onClick={(event)=>{handleCloseEditMode(event)}}>Close</button>\n          </div>\n  \n        <ul>\n          {listItems.map((item, index) => (\n            <li key={index}>\n              <input \n                type= 'checkbox' disabled={true}/>\n              <textarea \n                rows=\"1\" \n                value={item}\n                ref = {el => listRef.current = [...listRef.current, el]}\n                onBlur={(event) => {handleUserClickOut(event,index)}}  \n                onChange={(event) => {handleTaskChange(event, index)}} \n                className=\"task\"\n              />\n            </li>\n          ))}\n          <li>\n            <textarea \n              rows=\"1\" \n              placeholder='+ New Task' \n              onClick={(e) => createNewTask(e)} \n              className=\"task\"\n            /> \n            <input \n              disabled={true}\n              type= 'checkbox'\n              id='invisible-checkbox'\n            />\n          </li>\n        </ul>\n        {/* <button onClick={(event)=>{handleDone(event)}}>Save</button> */}\n  \n      </div>\n      </div>\n\n    );\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
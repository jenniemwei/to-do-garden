{"ast":null,"code":"var _jsxFileName = \"/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ListOptions from './ListOptions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditListMode({\n  taskLists,\n  handleChangeTaskState,\n  listIndex\n}) {\n  _s();\n  console.log(\"LIST INDEX\", listIndex);\n  const currentTitle = taskLists[listIndex].title;\n  console.log(currentTitle);\n  const [editingTitle, setEditingTitle] = useState(currentTitle);\n  const listItems = taskLists[listIndex].currentItems;\n  const [editingList, setEditingList] = useState([...listItems]);\n  const checkedItems = taskLists[listIndex].completedItems;\n  const editModeDisplayed = taskLists[listIndex].editModeDisplayed;\n  const optionsDisplayed = taskLists[listIndex].optionsDisplayed;\n\n  // const listRef = useRef([]);\n\n  // useEffect(() => {\n  //   const size = listRef.current.length;\n  //   listRef.current[size - 1].focus();\n\n  // }, [listItems.length]);\n\n  function handleTaskChange(event, index) {\n    const newListItems = [...listItems];\n    newListItems[index] = event.target.value;\n    setEditingList(newListItems);\n    event.target.style.height = '1em';\n    event.target.style.height = `${event.target.scrollHeight}px`;\n  }\n  function handleTitleChange(event) {\n    setEditingTitle(event.target.value);\n  }\n  function handleUserClickOut(event, index) {\n    const taskContent = event.target.value;\n    // console.log(\"CLICKED OUT\")\n    if (taskContent.length === 0) {\n      const newEditingList = [...editingList];\n      newEditingList.pop(index);\n      setEditingList(newEditingList);\n    }\n  }\n  function handleCloseEditMode(event) {\n    handleChangeTaskState(listIndex, \"editModeDisplayed\", false);\n  }\n  function createNewTask(event) {\n    const text = event.target.value;\n    setEditingList([...editingList, text]);\n  }\n  function handleSave(event) {\n    handleChangeTaskState(listIndex, \"currentItems\", editingList);\n    handleChangeTaskState(listIndex, \"title\", editingTitle);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"edit-mode-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list edit-mode\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"title-input list-name\",\n          value: editingTitle,\n          onChange: event => {\n            handleTitleChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => {\n            handleCloseEditMode(event);\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [editingList.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"1\",\n            value: item\n            // ref = {el => listRef.current = [...listRef.current, el]}\n            ,\n            onBlur: event => {\n              handleUserClickOut(event, index);\n            },\n            onChange: event => {\n              handleTaskChange(event, index);\n            },\n            className: \"task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            rows: \"1\",\n            placeholder: \"+ New Task\",\n            onClick: e => createNewTask(e),\n            className: \"task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            type: \"checkbox\",\n            id: \"invisible-checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: event => {\n          handleSave(event);\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n_s(EditListMode, \"0BrpIig6o7uJJVMdPGEpidIUnAw=\");\n_c = EditListMode;\nvar _c;\n$RefreshReg$(_c, \"EditListMode\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ListOptions","jsxDEV","_jsxDEV","EditListMode","taskLists","handleChangeTaskState","listIndex","_s","console","log","currentTitle","title","editingTitle","setEditingTitle","listItems","currentItems","editingList","setEditingList","checkedItems","completedItems","editModeDisplayed","optionsDisplayed","handleTaskChange","event","index","newListItems","target","value","style","height","scrollHeight","handleTitleChange","handleUserClickOut","taskContent","length","newEditingList","pop","handleCloseEditMode","createNewTask","text","handleSave","id","children","className","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","type","disabled","rows","onBlur","placeholder","e","_c","$RefreshReg$"],"sources":["/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport ListOptions from './ListOptions'\n\n\nexport default function EditListMode({ taskLists, handleChangeTaskState, listIndex}) {\n\n  console.log(\"LIST INDEX\", listIndex)\n  const currentTitle=taskLists[listIndex].title\n  console.log(currentTitle)\n  const [editingTitle, setEditingTitle]=useState(currentTitle)\n  const listItems = taskLists[listIndex].currentItems\n  const [editingList, setEditingList]=useState([...listItems])\n  const checkedItems = taskLists[listIndex].completedItems\n  const editModeDisplayed = taskLists[listIndex].editModeDisplayed\n  const optionsDisplayed = taskLists[listIndex].optionsDisplayed\n\n\n    // const listRef = useRef([]);\n\n    // useEffect(() => {\n    //   const size = listRef.current.length;\n    //   listRef.current[size - 1].focus();\n      \n    // }, [listItems.length]);\n  \n    function handleTaskChange(event, index) {\n      const newListItems = [...listItems]\n      newListItems[index] = event.target.value\n      setEditingList(newListItems)\n      event.target.style.height = '1em';\n      event.target.style.height = `${event.target.scrollHeight}px`; \n      \n    }\n    function handleTitleChange(event){\n      setEditingTitle(event.target.value)\n    }\n  \n  \n    function handleUserClickOut(event,index){\n      const taskContent=event.target.value\n      // console.log(\"CLICKED OUT\")\n      if (taskContent.length===0){\n        const newEditingList=[...editingList]\n        newEditingList.pop(index)\n        setEditingList(newEditingList)\n      }\n    }\n    function handleCloseEditMode(event){\n      handleChangeTaskState(listIndex, \"editModeDisplayed\", false)\n    }\n  \n    function createNewTask(event) {\n      const text = event.target.value\n      setEditingList([...editingList, text])\n    }\n\n    function handleSave(event){\n      handleChangeTaskState(listIndex, \"currentItems\", editingList)\n      handleChangeTaskState(listIndex, \"title\", editingTitle)\n    }\n    \n    return (\n      <div id=\"edit-mode-container\" >\n      <div className=\"task-list edit-mode\">\n        <div className='list-header'>      \n          <input className=\"title-input list-name\" value={editingTitle} onChange={(event)=>{handleTitleChange(event)}}></input>\n          <button onClick={(event)=>{handleCloseEditMode(event)}}>Close</button>\n          </div>\n  \n        <ul>\n          {editingList.map((item, index) => (\n            <li key={index}>\n              <input \n                type= 'checkbox' disabled={true}/>\n              <textarea \n                rows=\"1\" \n                value={item}\n                // ref = {el => listRef.current = [...listRef.current, el]}\n                onBlur={(event) => {handleUserClickOut(event,index)}}  \n                onChange={(event) => {handleTaskChange(event, index)}} \n                className=\"task\"\n              />\n            </li>\n          ))}\n          <li>\n            <textarea \n              rows=\"1\" \n              placeholder='+ New Task' \n              onClick={(e) => createNewTask(e)} \n              className=\"task\"\n            /> \n            <input \n              disabled={true}\n              type= 'checkbox'\n              id='invisible-checkbox'\n            />\n          </li>\n        </ul>\n        <button onClick={(event)=>{handleSave(event)}}>Save</button>\n      </div>\n      </div>\n\n    );\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
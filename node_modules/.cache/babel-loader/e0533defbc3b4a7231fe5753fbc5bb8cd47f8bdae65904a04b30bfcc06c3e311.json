{"ast":null,"code":"import React,{useState}from\"react\";import\"../css/Lists.css\";import ListOptions from\"./ListOptions\";import EditListMode from\"./EditListMode\";import{MoreVertical}from\"react-feather\";import{ChevronRight}from\"react-feather\";import{ChevronDown}from\"react-feather\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function TaskList(_ref){let{listIndex,taskLists,setTaskLists}=_ref;//flower images and alt text for each stage of flower growth\nconst allFlowers=[{source:\"Flower1\",alt:\"A small stem with sprouting leaf, first stage of the flower growth\"},{source:\"Flower2\",alt:\"Taller stem, two leaves, and a bud, second stage of the flower growth\"},{source:\"Flower3\",alt:\"Taller stem, two larger leaves, opening flower, third stage of the flower growth\"},{source:\"Flower4\",alt:\"Tall stem, two full leaves, a third sprouting leaf, flower blooming, fourth stage of the flower growth\"},{source:\"Flower5\",alt:\"4 leaves, flower in full bloom, fifth stage of flower growth\"}];//changes the state of taskLists, passed into other components to change taskLists state\nfunction handleChangeTaskState(index,key,value){const newTaskLists=[...taskLists];newTaskLists[index][key]=value;setTaskLists(newTaskLists);}const listItems=taskLists[listIndex].currentItems;const checkedItems=taskLists[listIndex].checkedItems;//states for displaying edit mode, list options, and completed tasks\nconst editModeDisplayed=taskLists[listIndex].editModeDisplayed;const optionsDisplayed=taskLists[listIndex].optionsDisplayed;const completedDisplayed=taskLists[listIndex].completedDisplayed;//handles checkbox change, moves checked item to checkedItems array\nfunction handleCheckBoxChange(event,index,item){const newListItems=[...listItems];const newCheckedItems=[...checkedItems,item];newListItems.splice(index,1);handleChangeTaskState(listIndex,\"checkedItems\",newCheckedItems);console.log(\"newCheckedItems\",newCheckedItems);handleChangeTaskState(listIndex,\"currentItems\",newListItems);}//sets optionsDisplayed to true when user clicks on the three dots, displaying list options\nfunction handleOptionsClick(event){for(let i=0;i<taskLists.length;i++){handleChangeTaskState(i,\"optionsDisplayed\",false);}const currentOptionsDisplayed=taskLists[listIndex].optionsDisplayed;handleChangeTaskState(listIndex,\"optionsDisplayed\",!currentOptionsDisplayed);}return/*#__PURE__*/_jsxs(_Fragment,{children:[editModeDisplayed&&/*#__PURE__*/_jsx(EditListMode,{taskLists:taskLists,handleChangeTaskState:handleChangeTaskState,listIndex:listIndex}),/*#__PURE__*/_jsxs(\"div\",{className:\"task-list\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"list-container \",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"list-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"list-title\",mode:\"single\",children:taskLists[listIndex].title}),/*#__PURE__*/_jsx(\"div\",{className:\"more-container\",children:/*#__PURE__*/_jsx(MoreVertical,{id:\"more-button\",\"aria-label\":\"click to display list options\",onClick:event=>{handleOptionsClick(event);}})})]}),/*#__PURE__*/_jsx(\"hr\",{}),optionsDisplayed&&/*#__PURE__*/_jsx(ListOptions,{taskLists:taskLists,handleChangeTaskState:handleChangeTaskState,setTaskLists:setTaskLists,listIndex:listIndex}),/*#__PURE__*/_jsxs(\"ul\",{className:\"list-items-container\",children:[listItems.map((item,index)=>/*#__PURE__*/_jsxs(\"li\",{className:\"task-container\",children:[/*#__PURE__*/_jsx(\"input\",{\"aria-label\":\"click to mark task as completed\",type:\"checkbox\",checked:false,onChange:event=>{handleCheckBoxChange(event,index,item);},autoFocus:true}),/*#__PURE__*/_jsx(\"p\",{className:\"regular-task-text\",children:item})]},index)),/*#__PURE__*/_jsxs(\"div\",{className:\"completed-header\",children:[checkedItems!=null&&checkedItems.length!==0&&/*#__PURE__*/_jsx(\"h3\",{children:\"Completed\"}),checkedItems!=null&&checkedItems.length!==0&&(completedDisplayed?/*#__PURE__*/_jsx(ChevronDown,{\"aria-label\":\"click to minimize completed tasks\",onClick:event=>{handleChangeTaskState(listIndex,\"completedDisplayed\",!completedDisplayed);}}):/*#__PURE__*/_jsx(ChevronRight,{\"aria-label\":\"click to display completed tasks\",onClick:event=>{handleChangeTaskState(listIndex,\"completedDisplayed\",!completedDisplayed);}}))]}),completedDisplayed&&checkedItems.map((item,index)=>/*#__PURE__*/_jsxs(\"li\",{className:\"task-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",disabled:true,checked:true}),/*#__PURE__*/_jsx(\"p\",{className:\"regular-task-text\",children:item})]},index+listItems.length))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flower-container\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"flower-count\",children:/*#__PURE__*/_jsxs(\"p\",{id:\"flower-text\",\"aria-label\":\"Flowers completed\",children:[\"\\uD83C\\uDF37 \",\"  \",Math.floor((taskLists[listIndex].checkedItems.length+1)/5)]})}),/*#__PURE__*/_jsx(\"img\",{src:require(\"../flower-assets/\"+allFlowers[taskLists[listIndex].checkedItems.length%5][\"source\"]+\".svg\"),alt:allFlowers[taskLists[listIndex].checkedItems.length%5][\"alt\"]})]})]})]});}","map":{"version":3,"names":["React","useState","ListOptions","EditListMode","MoreVertical","ChevronRight","ChevronDown","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TaskList","_ref","listIndex","taskLists","setTaskLists","allFlowers","source","alt","handleChangeTaskState","index","key","value","newTaskLists","listItems","currentItems","checkedItems","editModeDisplayed","optionsDisplayed","completedDisplayed","handleCheckBoxChange","event","item","newListItems","newCheckedItems","splice","console","log","handleOptionsClick","i","length","currentOptionsDisplayed","children","className","mode","title","id","onClick","map","type","checked","onChange","autoFocus","disabled","Math","floor","src","require"],"sources":["/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/TaskList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"../css/Lists.css\";\nimport ListOptions from \"./ListOptions\";\nimport EditListMode from \"./EditListMode\";\nimport { MoreVertical } from \"react-feather\";\nimport { ChevronRight } from \"react-feather\";\nimport { ChevronDown } from \"react-feather\";\n\nexport default function TaskList({ listIndex, taskLists, setTaskLists }) {\n  //flower images and alt text for each stage of flower growth\n  const allFlowers = [\n    {\n      source: \"Flower1\",\n      alt: \"A small stem with sprouting leaf, first stage of the flower growth\",\n    },\n    {\n      source: \"Flower2\",\n      alt: \"Taller stem, two leaves, and a bud, second stage of the flower growth\",\n    },\n    {\n      source: \"Flower3\",\n      alt: \"Taller stem, two larger leaves, opening flower, third stage of the flower growth\",\n    },\n    {\n      source: \"Flower4\",\n      alt: \"Tall stem, two full leaves, a third sprouting leaf, flower blooming, fourth stage of the flower growth\",\n    },\n    {\n      source: \"Flower5\",\n      alt: \"4 leaves, flower in full bloom, fifth stage of flower growth\",\n    },\n  ];\n  //changes the state of taskLists, passed into other components to change taskLists state\n  function handleChangeTaskState(index, key, value) {\n    const newTaskLists = [...taskLists];\n    newTaskLists[index][key] = value;\n    setTaskLists(newTaskLists);\n  }\n\n  const listItems = taskLists[listIndex].currentItems;\n  const checkedItems = taskLists[listIndex].checkedItems;\n  //states for displaying edit mode, list options, and completed tasks\n  const editModeDisplayed = taskLists[listIndex].editModeDisplayed;\n  const optionsDisplayed = taskLists[listIndex].optionsDisplayed;\n  const completedDisplayed = taskLists[listIndex].completedDisplayed;\n\n  //handles checkbox change, moves checked item to checkedItems array\n  function handleCheckBoxChange(event, index, item) {\n    const newListItems = [...listItems];\n    const newCheckedItems = [...checkedItems, item];\n    newListItems.splice(index, 1);\n    handleChangeTaskState(listIndex, \"checkedItems\", newCheckedItems);\n    console.log(\"newCheckedItems\", newCheckedItems);\n    handleChangeTaskState(listIndex, \"currentItems\", newListItems);\n  }\n  //sets optionsDisplayed to true when user clicks on the three dots, displaying list options\n  function handleOptionsClick(event) {\n    for (let i = 0; i < taskLists.length; i++) {\n      handleChangeTaskState(i, \"optionsDisplayed\", false);\n    }\n    const currentOptionsDisplayed = taskLists[listIndex].optionsDisplayed;\n    handleChangeTaskState(\n      listIndex,\n      \"optionsDisplayed\",\n      !currentOptionsDisplayed\n    );\n  }\n\n  return (\n    <>\n      {editModeDisplayed && (\n        <EditListMode\n          taskLists={taskLists}\n          handleChangeTaskState={handleChangeTaskState}\n          listIndex={listIndex}\n        />\n      )}\n      <div className=\"task-list\">\n        <div className=\"list-container \">\n          <div className=\"list-header\">\n            <div className=\"list-title\" mode=\"single\">\n              {taskLists[listIndex].title}\n            </div>\n            <div className=\"more-container\">\n              {/* three dots symbol, aria label for screen readers */}\n              <MoreVertical\n                id=\"more-button\"\n                aria-label=\"click to display list options\"\n                onClick={(event) => {\n                  handleOptionsClick(event);\n                }}\n              ></MoreVertical>\n            </div>\n          </div>\n          <hr></hr>\n\n          {optionsDisplayed && (\n            <ListOptions\n              taskLists={taskLists}\n              handleChangeTaskState={handleChangeTaskState}\n              setTaskLists={setTaskLists}\n              listIndex={listIndex}\n            />\n          )}\n\n          <ul className=\"list-items-container\">\n            {listItems.map((item, index) => (\n              <li className=\"task-container\" key={index}>\n                {/* aria-label for screen readers explaining what checkbox does */}\n                <input\n                  aria-label=\"click to mark task as completed\"\n                  type=\"checkbox\"\n                  checked={false}\n                  onChange={(event) => {\n                    handleCheckBoxChange(event, index, item);\n                  }}\n                  autoFocus\n                />\n                <p className=\"regular-task-text\">{item}</p>\n              </li>\n            ))}\n            <div className=\"completed-header\">\n              {checkedItems != null && checkedItems.length !== 0 && (\n                <h3>Completed</h3>\n              )}\n              {/* ternary to display chevron right or down based on if completed tasks are displayed, aria labels for screen readers */}\n              {checkedItems != null &&\n                checkedItems.length !== 0 &&\n                (completedDisplayed ? (\n                  <ChevronDown\n                    aria-label=\"click to minimize completed tasks\"\n                    onClick={(event) => {\n                      handleChangeTaskState(\n                        listIndex,\n                        \"completedDisplayed\",\n                        !completedDisplayed\n                      );\n                    }}\n                  ></ChevronDown>\n                ) : (\n                  <ChevronRight\n                    aria-label=\"click to display completed tasks\"\n                    onClick={(event) => {\n                      handleChangeTaskState(\n                        listIndex,\n                        \"completedDisplayed\",\n                        !completedDisplayed\n                      );\n                    }}\n                  ></ChevronRight>\n                ))}\n            </div>\n\n            {completedDisplayed &&\n              checkedItems.map((item, index) => (\n                <li className=\"task-container\" key={index + listItems.length}>\n                  <input type=\"checkbox\" disabled={true} checked={true} />\n                  <p className=\"regular-task-text\">{item}</p>\n                </li>\n              ))}\n          </ul>\n        </div>\n        <div className=\"flower-container\">\n          <div id=\"flower-count\">\n            {/* calculates how many flowers completed from checkedItems array, aria label for flower emoji screen readers */}\n            <p id=\"flower-text\" aria-label=\"Flowers completed\">\n              🌷 {\"  \"}\n              {Math.floor((taskLists[listIndex].checkedItems.length + 1) / 5)}\n            </p>\n          </div>\n          <img\n            src={require(\"../flower-assets/\" +\n              allFlowers[taskLists[listIndex].checkedItems.length % 5][\n                \"source\"\n              ] +\n              \".svg\")}\n            alt={\n              allFlowers[taskLists[listIndex].checkedItems.length % 5][\"alt\"]\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ListOptions from \"./ListOptions\";\nimport { X } from \"react-feather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditListMode({\n  taskLists,\n  handleChangeTaskState,\n  listIndex\n}) {\n  _s();\n  const currentTitle = taskLists[listIndex].title;\n  //editing title that doesn't change taskLists state until save button is clicked\n  const [editingTitle, setEditingTitle] = useState(currentTitle);\n  const listItems = taskLists[listIndex].currentItems;\n  //editing list that doesn't change taskLists state until save button is clicked\n  const [editingList, setEditingList] = useState([...listItems]);\n  const listRef = useRef([]);\n  useEffect(() => {\n    const size = listRef.current.length;\n    if (size > 0 && listRef.current[size - 1] !== null) {\n      listRef.current[size - 1].focus(); //focuses on recently created task\n    }\n  }, [editingList.length]);\n  //handles change in task content in editing list\n  function handleTaskChange(event, index) {\n    const newListItems = [...editingList];\n    newListItems[index] = event.target.value;\n    setEditingList(newListItems);\n    // resizes text area to fit typed content\n    event.target.style.height = \"1em\";\n    event.target.style.height = `${event.target.scrollHeight}px`;\n  }\n  function handleTitleChange(event) {\n    // resizes text area to fit typed title\n    event.target.style.height = \"1em\";\n    event.target.style.height = `${event.target.scrollHeight}px`;\n    setEditingTitle(event.target.value);\n  }\n  function handleUserClickOut(event, index) {\n    const taskContent = event.target.value;\n    if (taskContent.length === 0) {\n      const newEditingList = [...editingList];\n      newEditingList.pop(index);\n      setEditingList(newEditingList);\n    }\n  }\n  //closes edit mode when user clicks on close button by setting editModeDisplayed to false\n  function handleCloseEditMode(event) {\n    handleChangeTaskState(listIndex, \"editModeDisplayed\", false);\n  }\n  //creates new task in the editing list when user clicks on + New Task\n  function createNewTask(event) {\n    const text = event.target.value;\n    setEditingList([...editingList, text]);\n  }\n\n  //saves editing list and title to taskLists state\n  function handleSave(event) {\n    handleChangeTaskState(listIndex, \"editModeDisplayed\", false);\n    handleChangeTaskState(listIndex, \"currentItems\", editingList);\n    handleChangeTaskState(listIndex, \"title\", editingTitle);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"edit-mode-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" edit-mode\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-header\",\n        children: [\"aria\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          \"aria-label\": \"type to edit list title\",\n          rows: \"1\",\n          className: \"title-input list-title\",\n          value: editingTitle,\n          placeholder: \"Title\",\n          onChange: event => {\n            handleTitleChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: event => {\n            handleCloseEditMode(event);\n          },\n          \"aria-label\": \"close edit list popup\",\n          className: \"close-button\",\n          children: /*#__PURE__*/_jsxDEV(X, {\n            size: \"30\",\n            color: \"gray\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [editingList.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"task-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \" task-text\",\n            rows: \"1\",\n            value: item,\n            ref: el => listRef.current = [...listRef.current, el],\n            onBlur: event => {\n              handleUserClickOut(event, index);\n            },\n            onChange: event => {\n              handleTaskChange(event, index);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"task-container new-task task-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: e => createNewTask(e),\n            children: \"+ New Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            disabled: true,\n            type: \"checkbox\",\n            id: \"invisible-checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"blue-button\",\n        onClick: event => {\n          handleSave(event);\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(EditListMode, \"MwfinAFWHKK1nqILirDckMxLEJs=\");\n_c = EditListMode;\nvar _c;\n$RefreshReg$(_c, \"EditListMode\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ListOptions","X","jsxDEV","_jsxDEV","EditListMode","taskLists","handleChangeTaskState","listIndex","_s","currentTitle","title","editingTitle","setEditingTitle","listItems","currentItems","editingList","setEditingList","listRef","size","current","length","focus","handleTaskChange","event","index","newListItems","target","value","style","height","scrollHeight","handleTitleChange","handleUserClickOut","taskContent","newEditingList","pop","handleCloseEditMode","createNewTask","text","handleSave","id","children","className","rows","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","map","item","type","disabled","ref","el","onBlur","e","_c","$RefreshReg$"],"sources":["/Users/jenniewei/Documents/GitHub/to-do-lists/src/components/EditListMode.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport ListOptions from \"./ListOptions\";\nimport { X } from \"react-feather\";\n\nexport default function EditListMode({\n  taskLists,\n  handleChangeTaskState,\n  listIndex,\n}) {\n  const currentTitle = taskLists[listIndex].title;\n  //editing title that doesn't change taskLists state until save button is clicked\n  const [editingTitle, setEditingTitle] = useState(currentTitle);\n  const listItems = taskLists[listIndex].currentItems;\n  //editing list that doesn't change taskLists state until save button is clicked\n  const [editingList, setEditingList] = useState([...listItems]);\n\n  const listRef = useRef([]);\n\n  useEffect(() => {\n    const size = listRef.current.length;\n    if (size > 0 && listRef.current[size - 1] !== null) {\n      listRef.current[size - 1].focus(); //focuses on recently created task\n    }\n  }, [editingList.length]);\n  //handles change in task content in editing list\n  function handleTaskChange(event, index) {\n    const newListItems = [...editingList];\n    newListItems[index] = event.target.value;\n    setEditingList(newListItems);\n    // resizes text area to fit typed content\n    event.target.style.height = \"1em\";\n    event.target.style.height = `${event.target.scrollHeight}px`;\n  }\n  function handleTitleChange(event) {\n    // resizes text area to fit typed title\n    event.target.style.height = \"1em\";\n    event.target.style.height = `${event.target.scrollHeight}px`;\n    setEditingTitle(event.target.value);\n  }\n\n  function handleUserClickOut(event, index) {\n    const taskContent = event.target.value;\n    if (taskContent.length === 0) {\n      const newEditingList = [...editingList];\n      newEditingList.pop(index);\n      setEditingList(newEditingList);\n    }\n  }\n  //closes edit mode when user clicks on close button by setting editModeDisplayed to false\n  function handleCloseEditMode(event) {\n    handleChangeTaskState(listIndex, \"editModeDisplayed\", false);\n  }\n  //creates new task in the editing list when user clicks on + New Task\n  function createNewTask(event) {\n    const text = event.target.value;\n    setEditingList([...editingList, text]);\n  }\n\n  //saves editing list and title to taskLists state\n  function handleSave(event) {\n    handleChangeTaskState(listIndex, \"editModeDisplayed\", false);\n    handleChangeTaskState(listIndex, \"currentItems\", editingList);\n    handleChangeTaskState(listIndex, \"title\", editingTitle);\n  }\n\n  return (\n    <div id=\"edit-mode-container\">\n      <div className=\" edit-mode\">\n        <div className=\"list-header\">\n          aria\n          <textarea\n          aria-label=\"type to edit list title\"\n            rows=\"1\"\n            className=\"title-input list-title\"\n            value={editingTitle}\n            placeholder=\"Title\"\n            onChange={(event) => {\n              handleTitleChange(event);\n            }}\n          ></textarea>\n          <button\n            onClick={(event) => {\n              handleCloseEditMode(event);\n            }}\n            aria-label=\"close edit list popup\"\n            className=\"close-button\"\n          >\n            <X size=\"30\" color=\"gray\" />\n          </button>\n        </div>\n        <ul>\n          {editingList.map((item, index) => (\n            <li className=\"task-container\" key={index}>\n              <input type=\"checkbox\" disabled={true} />\n              <textarea\n                className=\" task-text\"\n                rows=\"1\"\n                value={item}\n                ref={(el) => (listRef.current = [...listRef.current, el])}\n                onBlur={(event) => {\n                  handleUserClickOut(event, index);\n                }}\n                onChange={(event) => {\n                  handleTaskChange(event, index);\n                }}\n              />\n            </li>\n          ))}\n          <button className=\"task-container new-task task-text\">\n            <div onClick={(e) => createNewTask(e)}>+ New Task</div>\n            <input disabled={true} type=\"checkbox\" id=\"invisible-checkbox\" />\n          </button>\n        </ul>\n        <button\n          className=\"blue-button\"\n          onClick={(event) => {\n            handleSave(event);\n          }}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}